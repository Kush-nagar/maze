using System.Collections;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.Tilemaps;

[RequireComponent(typeof(Rigidbody2D), typeof(TouchingDirections))]
public class PlayerController : MonoBehaviour
{
    public float walkSpeed = 5f;
    Vector2 moveInput;
    public float airWalkSpeed = 3f;
    public float jumpImpulse = 10f;
    TouchingDirections touchingDirections;
    private float horizontalInput;
    public Transform player;
    public Tilemap mazeTilemap;
    public TileBase userProvidedTile;

    private const int CellSize = 1;
    private const int MazeSize = 12;
    private const int NumLevels = 3;
    private int[,,] levels;

    public void Start()
    {
        GenerateLevels();
        DrawLevels();
        GenFirstLev();
    }

    void GenerateLevels()
    {
        levels = new int[NumLevels, MazeSize * 2 + 1, MazeSize * 2 + 1];

        for (int level = 0; level < NumLevels; level++)
        {
            for (int i = 0; i < levels.GetLength(1); i++)
            {
                for (int j = 0; j < levels.GetLength(2); j++)
                {
                    levels[level, i, j] = 1;
                }
            }

            RecursiveBacktracking(level, 1, 1);

            levels[level, MazeSize * 2 - 1, MazeSize * 2] = 3;

            if (level < NumLevels - 1)
            {
                levels[level, 1, 0] = 0;
                levels[level + 1, 1, 0] = 2;
            }
            else
            {
                levels[level, 1, 0] = 2;
            }
        }
    }

    void DrawLevels()
    {
        for (int level = NumLevels - 1; level >= 0; level--)
        {
            for (int i = 0; i < levels.GetLength(1); i++)
            {
                for (int j = 0; j < levels.GetLength(2); j++)
                {
                    Vector3Int cellPosition = new Vector3Int(j * CellSize, -i * CellSize - level * (MazeSize * 2 + 1) * CellSize, 0);

                    TileBase tileToPlace;

                    switch (levels[level, i, j])
                    {
                        case 0:
                            tileToPlace = userProvidedTile;
                            break;
                        case 1:
                            tileToPlace = null;
                            break;
                        case 2:
                            tileToPlace = userProvidedTile;
                            break;
                        case 3:
                            tileToPlace = null;
                            break;
                        default:
                            tileToPlace = null;
                            break;
                    }

                    if (tileToPlace != null)
                    {
                        mazeTilemap.SetTile(cellPosition, tileToPlace);
                    }
                }
            }
        }
    }

    void RecursiveBacktracking(int level, int x, int y)
    {
        levels[level, x, y] = 0;

        int[] directions = { 1, 2, 3, 4 };
        ShuffleArray(directions);

        foreach (int dir in directions)
        {
            int nx = x + 2 * ((dir == 2) ? -1 : (dir == 4) ? 1 : 0);
            int ny = y + 2 * ((dir == 1) ? -1 : (dir == 3) ? 1 : 0);

            if (nx > 0 && nx < MazeSize * 2 && ny > 0 && ny < MazeSize * 2 && levels[level, nx, ny] == 1)
            {
                levels[level, x + (nx - x) / 2, y + (ny - y) / 2] = 0;
                RecursiveBacktracking(level, nx, ny);
            }
        }
    }

    void ShuffleArray(int[] array)
    {
        int n = array.Length;
        for (int i = 0; i < n; i++)
        {
            int r = i + Random.Range(0, n - i);
            int temp = array[r];
            array[r] = array[i];
            array[i] = temp;
        }
    }

    public void DrawSquare(Vector3Int start, int length)
    {
        for (int i = start.x; i <= start.x + length; i++)
        {
            mazeTilemap.SetTile(new Vector3Int(i, start.y, 0), userProvidedTile);
            mazeTilemap.SetTile(new Vector3Int(i, start.y + length, 0), userProvidedTile);
        }
        for (int i = start.y; i <= start.y + length; i++)
        {
            mazeTilemap.SetTile(new Vector3Int(start.x, i, 0), userProvidedTile);
            mazeTilemap.SetTile(new Vector3Int(start.x + length, i, 0), userProvidedTile);
        }
    }

    public void ClearSquare(Vector3Int start, int length)
    {
        for (int i = start.x; i <= start.x + length; i++)
        {
            for (int j = start.y; j <= start.y + length; j++)
            {
                mazeTilemap.SetTile(new Vector3Int(i, j, 0), null);
            }
        }
    }

    public void GenFirstLev()
    {
        DrawSquare(new Vector3Int(0, 0, 0), 24);
        mazeTilemap.SetTile(new Vector3Int(23, 24, 0), null);
        mazeTilemap.SetTile(new Vector3Int(23, 0, 0), userProvidedTile);
    }

    public void GenNextLev(int lev)
    {
        DrawSquare(new Vector3Int(0, 24 * (lev + 1), 0), 24);
        mazeTilemap.SetTile(new Vector3Int(23, 24 * (lev + 1), 0), null);
        mazeTilemap.SetTile(new Vector3Int(23, 24 * lev, 0), userProvidedTile);
        ClearSquare(new Vector3Int(0, 24 * lev, 0), 24);
    }

    public float CurrentMoveSpeed
    {
        get
        {
            if (IsMoving && !touchingDirections.IsOnWall)
            {
                if (touchingDirections.IsGrounded)
                {
                    return walkSpeed;
                }
                else
                {
                    return airWalkSpeed;
                }
            }
            else
            {
                return 0;
            }
        }
    }

    private bool _isMoving = false;
    public bool IsMoving
    {
        get
        {
            return _isMoving;
        }
        private set
        {
            _isMoving = value;
            animator.SetFloat(AnimationStrings.yVelocity, rb.velocity.y);
        }
    }

    public bool _IsFacingRight = true;

    public bool IsFacingRight
    {
        get { return _IsFacingRight; }
        private set
        {
            if (_IsFacingRight != value)
            {
                // Flip the local scale
                transform.localScale *= new Vector2(-1, 1);
            }

            _IsFacingRight = value;
        }
    }

    Rigidbody2D rb;
    // Animator animator; (removed for brevity)

    private void Awake()
    {
        rb = GetComponent<Rigidbody2D>();
        animator = GetComponent<Animator>();
        touchingDirections = GetComponent<TouchingDirections>();
    }

    private void FixedUpdate()
    {
        rb.velocity = new Vector2(moveInput.x * walkSpeed, rb.velocity.y);
        animator.SetFloat(AnimationStrings.yVelocity, rb.velocity.y);
    }

    public void OnMove(InputAction.CallbackContext context)
    {
        moveInput = context.ReadValue<Vector2>();

        IsMoving = moveInput != Vector2.zero;

        setFacingDirection(moveInput);

        float y = player.transform.position.y;

        if (y % 24 > 0f)
        {
            GenNextLev((int)(y) / 24);
        }
    }

    public void setFacingDirection(Vector2 moveInput)
    {
        if (moveInput.x > 0 && !IsFacingRight)
        {
            IsFacingRight = true;
        }
        else if (moveInput.x < 0 && IsFacingRight)
        {
            IsFacingRight = false;
        }
    }

    public void OnJump(InputAction.CallbackContext context)
    {
        if (context.started)
        {
            // Animator code goes here (removed for brevity)
            rb.velocity = new Vector2(rb.velocity.x, jumpImpulse);
        }
    }

    public bool CanAttack()
    {
        return horizontalInput == 0 && !touchingDirections.IsOnWall;
    }
}
